/* @flow
 * @generated by TsFlower
 */
import type { PartialState as $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState } from '@react-navigation/routers';
import type { EventEmitter as $tsflower_import_type$_$_2e__2f_types$EventEmitter } from './types';
import type { EventConsumer as $tsflower_import_type$_$_2e__2f_types$EventConsumer } from './types';
import type { Readonly, Partial } from 'tsflower/subst/lib';
import {
  type NavigationAction,
  type NavigationState,
  type Router,
} from '@react-navigation/routers';
import { type NavigationEventEmitter } from './useEventEmitter';
import { type NavigationProp, PrivateValueStore } from './types';

type Options<State: NavigationState<>, Action: NavigationAction> = {
  onAction: (action: NavigationAction, visitedNavigators?: Set<string>) => boolean,
  getState: () => State,
  emitter: NavigationEventEmitter<any>,
  router: Router<State, Action>,
  ...
};

declare export default function useNavigationHelpers<
  State: NavigationState<>,
  ActionHelpers: { [key: string]: () => void },
  Action: NavigationAction,
  EventMap: { [key: string]: any },
>(
  Options<State, Action>,
): {
  dispatch(
    action:
      | Readonly<{
          type: string,
          payload?: { ... } | void,
          source?: string | void,
          target?: string | void,
          ...
        }>
      | ((
          state: Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              {
                state?:
                  | Readonly<any>
                  | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                      Readonly<any>,
                    >
                  | void,
                ...
              }[],
            type: string,
            stale: false,
            ...
          }>,
        ) => Readonly<{
          type: string,
          payload?: { ... } | void,
          source?: string | void,
          target?: string | void,
          ...
        }>),
  ): void,
  navigate<RouteName: string>(...args: [RouteName] | [RouteName, { ... } | void]): void,
  navigate<RouteName_1: string>(
    route:
      | {
          key: string,
          params?: { ... } | void,
          ...
        }
      | {
          name: RouteName_1,
          key?: string | void,
          params: { ... } | void,
          ...
        },
  ): void,
  reset(
    state:
      | Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            {
              state?:
                | Readonly<any>
                | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                    Readonly<any>,
                  >
                | void,
              ...
            }[],
          type: string,
          stale: false,
          ...
        }>
      | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
          Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              {
                state?:
                  | Readonly<any>
                  | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                      Readonly<any>,
                    >
                  | void,
                ...
              }[],
            type: string,
            stale: false,
            ...
          }>,
        >,
  ): void,
  goBack(): void,
  isFocused(): boolean,
  canGoBack(): boolean,
  getParent<
    T = NavigationProp<
      { [key: string]: { ... } | void },
      string,
      Readonly<{
        key: string,
        index: number,
        routeNames: string[],
        history?: mixed[] | void,
        routes: Readonly<{
          key: string,
          name: string,
          ...
        }> &
          Readonly<{ params?: { ... } | void, ... }> &
          {
            state?:
              | Readonly<any>
              | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                  Readonly<any>,
                >
              | void,
            ...
          }[],
        type: string,
        stale: false,
        ...
      }>,
      { ... },
      { ... },
    > | void,
  >(): T,
  getState(): Readonly<{
    key: string,
    index: number,
    routeNames: string[],
    history?: mixed[] | void,
    routes: Readonly<{
      key: string,
      name: string,
      ...
    }> &
      Readonly<{ params?: { ... } | void, ... }> &
      {
        state?:
          | Readonly<any>
          | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<Readonly<any>>
          | void,
        ...
      }[],
    type: string,
    stale: false,
    ...
  }>,
  dangerouslyGetParent<
    T_1 = NavigationProp<
      { [key: string]: { ... } | void },
      string,
      Readonly<{
        key: string,
        index: number,
        routeNames: string[],
        history?: mixed[] | void,
        routes: Readonly<{
          key: string,
          name: string,
          ...
        }> &
          Readonly<{ params?: { ... } | void, ... }> &
          {
            state?:
              | Readonly<any>
              | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                  Readonly<any>,
                >
              | void,
            ...
          }[],
        type: string,
        stale: false,
        ...
      }>,
      { ... },
      { ... },
    > | void,
  >(): T_1,
  dangerouslyGetState(): Readonly<{
    key: string,
    index: number,
    routeNames: string[],
    history?: mixed[] | void,
    routes: Readonly<{
      key: string,
      name: string,
      ...
    }> &
      Readonly<{ params?: { ... } | void, ... }> &
      {
        state?:
          | Readonly<any>
          | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<Readonly<any>>
          | void,
        ...
      }[],
    type: string,
    stale: false,
    ...
  }>,
  ...
} & PrivateValueStore<{ [key: string]: { ... } | void }, string, { ... }> &
  $tsflower_import_type$_$_2e__2f_types$EventEmitter<EventMap> & {
    setParams<RouteName_2: string>(params: { ... } | void): void,
    ...
  } & {
    dispatch(
      action:
        | Readonly<{
            type: string,
            payload?: { ... } | void,
            source?: string | void,
            target?: string | void,
            ...
          }>
        | ((state: any) => Readonly<{
            type: string,
            payload?: { ... } | void,
            source?: string | void,
            target?: string | void,
            ...
          }>),
    ): void,
    navigate<RouteName_3: string>(...args: [RouteName_3] | [RouteName_3, { ... } | void]): void,
    navigate<RouteName_4: string>(
      route:
        | {
            key: string,
            params?: { ... } | void,
            ...
          }
        | {
            name: RouteName_4,
            key?: string | void,
            params: { ... } | void,
            ...
          },
    ): void,
    reset(state: any): void,
    goBack(): void,
    isFocused(): boolean,
    canGoBack(): boolean,
    getParent<
      T_2 = NavigationProp<
        { [key: string]: { ... } | void },
        string,
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            {
              state?:
                | Readonly<any>
                | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                    Readonly<any>,
                  >
                | void,
              ...
            }[],
          type: string,
          stale: false,
          ...
        }>,
        { ... },
        { ... },
      > | void,
    >(): T_2,
    getState(): any,
    dangerouslyGetParent<
      T_3 = NavigationProp<
        { [key: string]: { ... } | void },
        string,
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            {
              state?:
                | Readonly<any>
                | $tsflower_import_type$_$_40_react_2d_navigation_2f_routers$PartialState<
                    Readonly<any>,
                  >
                | void,
              ...
            }[],
          type: string,
          stale: false,
          ...
        }>,
        { ... },
        { ... },
      > | void,
    >(): T_3,
    dangerouslyGetState(): any,
    ...
  } & {
    setParams(params: { ... } | void): void,
    setOptions(options: Partial<any>): void,
    ...
  } & $tsflower_import_type$_$_2e__2f_types$EventConsumer<any> &
  PrivateValueStore<{ [key: string]: { ... } | void }, string, any> &
  ActionHelpers;

export {};
