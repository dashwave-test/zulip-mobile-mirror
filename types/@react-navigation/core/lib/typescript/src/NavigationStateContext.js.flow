/* @flow
 * @generated by TsFlower
 */
import type { Context as $tsflower_subst$React$Context } from 'tsflower/subst/react';
import type { Readonly } from 'tsflower/subst/lib';
import * as React from 'react';
import { type NavigationState, type PartialState } from '@react-navigation/routers';

declare var _default: $tsflower_subst$React$Context<{
  isDefault?: true | void,
  state?:
    | Readonly<{
        key: string,
        index: number,
        routeNames: string[],
        history?: mixed[] | void,
        routes: Readonly<{
          key: string,
          name: string,
          ...
        }> &
          Readonly<{ params?: { ... } | void, ... }> &
          { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
        type: string,
        stale: false,
        ...
      }>
    | PartialState<
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
          type: string,
          stale: false,
          ...
        }>,
      >
    | void,
  getKey: () => string | void,
  setKey: (key: string) => void,
  getState: () => NavigationState<> | PartialState<NavigationState<>> | void,
  setState: (state: NavigationState<> | PartialState<NavigationState<>> | void) => void,
  getIsInitial: () => boolean,
  addOptionsGetter?: (key: string, getter: () => { ... } | void | null) => void | void,
  ...
}>;

export default _default;
