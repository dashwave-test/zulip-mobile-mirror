/* @flow
 * @generated by TsFlower
 */
import {
  type NavigationAction,
  type NavigationState,
  type PartialState,
  type Router,
  type RouterConfigOptions,
} from '@react-navigation/routers';

import {
  type ChildActionListener,
  type ChildBeforeRemoveListener,
} from './NavigationBuilderContext';
import { type NavigationEventEmitter } from './useEventEmitter';
import { type EventMapCore } from './types';

type Options = {
  router: Router<NavigationState<>, NavigationAction>,
  key?: string,
  getState: () => NavigationState<>,
  setState: (state: NavigationState<> | PartialState<NavigationState<>>) => void,
  actionListeners: ChildActionListener[],
  beforeRemoveListeners: { [key: string]: ChildBeforeRemoveListener | void },
  routerConfigOptions: RouterConfigOptions,
  emitter: NavigationEventEmitter<EventMapCore<any>>,
  ...
};

declare export default function useOnAction(
  Options,
): (action: NavigationAction, visitedNavigators?: Set<string>) => boolean;
export {};
