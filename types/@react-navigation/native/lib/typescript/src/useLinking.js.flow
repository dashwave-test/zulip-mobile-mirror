/* @flow
 * @generated by TsFlower
 */
import type { PartialState as $tsflower_import_type$_$_40_react_2d_navigation_2f_core$PartialState } from '@react-navigation/core';
import type { PartialRoute as $tsflower_import_type$_$_40_react_2d_navigation_2f_core$PartialRoute } from '@react-navigation/core';
import type { Route as $tsflower_import_type$_$_40_react_2d_navigation_2f_core$Route } from '@react-navigation/core';
import type { RefObject as $tsflower_subst$React$RefObject } from 'tsflower/subst/react';
import type { PromiseLike, Partial, Readonly } from 'tsflower/subst/lib';
import * as React from 'react';
import { type NavigationContainerRef } from '@react-navigation/core';
import { type LinkingOptions } from './types';

declare export default function useLinking(
  ref: $tsflower_subst$React$RefObject<NavigationContainerRef>,
  LinkingOptions,
): {
  getInitialState: () => PromiseLike<
    | (Partial<
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          type: string,
          ...
        }>,
      > &
        Readonly<{
          stale?: true | void,
          routes: $tsflower_import_type$_$_40_react_2d_navigation_2f_core$PartialRoute<
            $tsflower_import_type$_$_40_react_2d_navigation_2f_core$Route<string, { ... } | void>,
          >[],
          ...
        }> & {
          state?:
            | (Partial<
                Readonly<{
                  key: string,
                  index: number,
                  routeNames: string[],
                  history?: mixed[] | void,
                  type: string,
                  ...
                }>,
              > &
                Readonly<{
                  stale?: true | void,
                  routes: $tsflower_import_type$_$_40_react_2d_navigation_2f_core$PartialRoute<
                    $tsflower_import_type$_$_40_react_2d_navigation_2f_core$Route<
                      string,
                      { ... } | void,
                    >,
                  >[],
                  ...
                }> &
                any)
            | void,
          ...
        })
    | void,
  >,
  ...
};
