/* @flow
 * @generated by TsFlower
 */
import type { SubsetProperties } from '../../../../../../src/generics';
import type { PartialState as $tsflower_import_type$_$_2e__2f_types$PartialState } from './types';
import type { Readonly } from 'tsflower/subst/lib';

import {
  type NavigationState,
  type Router,
  type DefaultRouterOptions,
  type Route,
  type ParamListBase,
} from './types';

export type StackActionType = $Exact<
  | {
      type: 'REPLACE',
      payload: {
        name: string,
        key?: string | void,
        params?: { ... },
        ...
      },
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'PUSH',
      payload: {
        name: string,
        key?: string | void,
        params?: { ... },
        ...
      },
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'POP',
      payload: { count: number, ... },
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'POP_TO_TOP',
      source?: string,
      target?: string,
      ...
    },
>;

export type StackRouterOptions = DefaultRouterOptions<>;
export type StackNavigationState<ParamList: ParamListBase> = NavigationState<ParamList> & {
  type: 'stack',
  ...
};

export type StackActionHelpers<ParamList: ParamListBase> = {
  replace<RouteName: $Keys<ParamList>>(
    name: RouteName,
    params: $ElementType<ParamList, RouteName>,
  ): void,
  push<RouteName: $Keys<ParamList>>(
    name: RouteName,
    params: $ElementType<ParamList, RouteName>,
  ): void,
  pop(count?: number): void,
  popToTop(): void,
  ...
};

declare export var StackActions: {
  replace(name: string, params?: { ... } | void): StackActionType,
  push(name: string, params?: { ... } | void): StackActionType,
  pop(count?: number): StackActionType,
  popToTop(): StackActionType,
  ...
};

declare export default function StackRouter(options: StackRouterOptions): Router<
  StackNavigationState<{ [key: string]: { ... } | void }>,
  | {
      type: 'GO_BACK',
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'NAVIGATE',
      payload:
        | {
            key: string,
            name?: void,
            params?: { ... } | void,
            merge?: boolean | void,
            ...
          }
        | {
            name: string,
            key?: string | void,
            params?: { ... } | void,
            merge?: boolean | void,
            ...
          },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'RESET',
      payload:
        | Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              {
                state?:
                  | Readonly<any>
                  | $tsflower_import_type$_$_2e__2f_types$PartialState<Readonly<any>>
                  | void,
                ...
              }[],
            type: string,
            stale: false,
            ...
          }>
        | $tsflower_import_type$_$_2e__2f_types$PartialState<
            Readonly<{
              key: string,
              index: number,
              routeNames: string[],
              history?: mixed[] | void,
              routes: Readonly<{
                key: string,
                name: string,
                ...
              }> &
                Readonly<{ params?: { ... } | void, ... }> &
                {
                  state?:
                    | Readonly<any>
                    | $tsflower_import_type$_$_2e__2f_types$PartialState<Readonly<any>>
                    | void,
                  ...
                }[],
              type: string,
              stale: false,
              ...
            }>,
          >
        | (Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            type: string,
            stale: false,
            ...
          }> & {
            routes: SubsetProperties<
              Route<string, { ... } | void>,
              {| name: mixed, params?: mixed |},
            >[],
            ...
          })
        | void,
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'SET_PARAMS',
      payload: { params?: { ... } | void, ... },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'REPLACE',
      payload: {
        name: string,
        key?: string | void,
        params?: { ... } | void,
        ...
      },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'PUSH',
      payload: {
        name: string,
        key?: string | void,
        params?: { ... } | void,
        ...
      },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'POP',
      payload: { count: number, ... },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'POP_TO_TOP',
      source?: string | void,
      target?: string | void,
      ...
    },
>;
