/* @flow
 * @generated by TsFlower
 */
import type { PartialState as $tsflower_import_type$_$_40_react_2d_navigation_2f_native$PartialState } from '@react-navigation/native';
import type { Readonly } from 'tsflower/subst/lib';
import type { JSX$Element as $tsflower_subst$React$JSX$Element } from 'tsflower/subst/react';
import * as React from 'react';
import {
  type StackNavigationState,
  type Route,
  type ParamListBase,
} from '@react-navigation/native';

import {
  type StackNavigationHelpers,
  type StackNavigationConfig,
  type StackDescriptorMap,
} from '../../types';

type Props = StackNavigationConfig & {
  state: StackNavigationState<ParamListBase>,
  navigation: StackNavigationHelpers,
  descriptors: StackDescriptorMap,
  ...
};

type State = {
  routes: Route<string>[],
  previousRoutes: Route<string>[],
  previousDescriptors: StackDescriptorMap,
  openingRouteKeys: string[],
  closingRouteKeys: string[],
  replacingRouteKeys: string[],
  descriptors: StackDescriptorMap,
  ...
};

declare export default class StackView extends React.Component<Props, State> {
  getDerivedStateFromProps(
    props: Readonly<Props>,
    state: Readonly<State>,
  ):
    | {
        routes: Route<string, { ... } | void>[],
        previousRoutes: Route<string, { ... } | void>[],
        descriptors: StackDescriptorMap,
        previousDescriptors: StackDescriptorMap,
        openingRouteKeys?: void,
        closingRouteKeys?: void,
        replacingRouteKeys?: void,
        ...
      }
    | {
        routes: Readonly<{
          key: string,
          name: string,
          ...
        }> &
          Readonly<{ params?: { ... } | void, ... }> &
          {
            state?:
              | Readonly<{
                  key: string,
                  index: number,
                  routeNames: string[],
                  history?: mixed[] | void,
                  routes: Readonly<{
                    key: string,
                    name: string,
                    ...
                  }> &
                    Readonly<{ params?: { ... } | void, ... }> &
                    any[],
                  type: string,
                  stale: false,
                  ...
                }>
              | $tsflower_import_type$_$_40_react_2d_navigation_2f_native$PartialState<
                  Readonly<{
                    key: string,
                    index: number,
                    routeNames: string[],
                    history?: mixed[] | void,
                    routes: Readonly<{
                      key: string,
                      name: string,
                      ...
                    }> &
                      Readonly<{ params?: { ... } | void, ... }> &
                      any[],
                    type: string,
                    stale: false,
                    ...
                  }>,
                >
              | void,
            ...
          }[],
        previousRoutes: Readonly<{
          key: string,
          name: string,
          ...
        }> &
          Readonly<{ params?: { ... } | void, ... }> &
          {
            state?:
              | Readonly<{
                  key: string,
                  index: number,
                  routeNames: string[],
                  history?: mixed[] | void,
                  routes: Readonly<{
                    key: string,
                    name: string,
                    ...
                  }> &
                    Readonly<{ params?: { ... } | void, ... }> &
                    any[],
                  type: string,
                  stale: false,
                  ...
                }>
              | $tsflower_import_type$_$_40_react_2d_navigation_2f_native$PartialState<
                  Readonly<{
                    key: string,
                    index: number,
                    routeNames: string[],
                    history?: mixed[] | void,
                    routes: Readonly<{
                      key: string,
                      name: string,
                      ...
                    }> &
                      Readonly<{ params?: { ... } | void, ... }> &
                      any[],
                    type: string,
                    stale: false,
                    ...
                  }>,
                >
              | void,
            ...
          }[],
        previousDescriptors: StackDescriptorMap,
        openingRouteKeys: string[],
        closingRouteKeys: string[],
        replacingRouteKeys: string[],
        descriptors: StackDescriptorMap,
        ...
      };
  state: State;
  getGesturesEnabled: any;
  getPreviousRoute: any;
  renderScene: any;
  renderHeader: any;
  handleOpenRoute: any;
  handleCloseRoute: any;
  handleTransitionStart: any;
  handleTransitionEnd: any;
  handleGestureStart: any;
  handleGestureEnd: any;
  handleGestureCancel: any;
  render(): $tsflower_subst$React$JSX$Element;
}

export {};
