/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  ComponentProps as $tsflower_subst$React$ComponentProps,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import type {
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
} from 'tsflower/subst/react-native';

import * as React from 'react';
import 'react-native';
import { PanGestureHandler } from 'react-native-gesture-handler';
import Animated from 'react-native-reanimated';
import { type Props as TabBarProps } from './TabBar';

import {
  type Layout,
  type NavigationState,
  type Route,
  type SceneRendererProps,
  type PagerCommonProps,
} from './types';

import { type Props as ChildProps } from './Pager';

export type Props<T: Route> = PagerCommonProps & {
  position?: Animated.Value<number>,
  onIndexChange: (index: number) => void,
  navigationState: NavigationState<T>,
  renderScene: (props: SceneRendererProps & { route: T, ... }) => $tsflower_subst$React$ReactNode,
  renderLazyPlaceholder: (props: { route: T, ... }) => $tsflower_subst$React$ReactNode,
  renderTabBar: (
    props: SceneRendererProps & { navigationState: NavigationState<T>, ... },
  ) => $tsflower_subst$React$ReactNode,
  tabBarPosition: 'top' | 'bottom',
  initialLayout?: {
    width?: number,
    height?: number,
    ...
  },
  lazy: (props: { route: T, ... }) => boolean | boolean,
  lazyPreloadDistance: number,
  removeClippedSubviews?: boolean,
  sceneContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  style?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  gestureHandlerProps: $tsflower_subst$React$ComponentProps<typeof PanGestureHandler>,
  renderPager: (props: ChildProps<T>) => $tsflower_subst$React$ReactNode,
  ...
};

type State = { layout: Layout, ... };

declare export default class TabView<T: Route> extends React.Component<Props<T>, State> {
  defaultProps: {
    tabBarPosition: string,
    renderTabBar: <P: Route>(props: TabBarProps<P>) => $tsflower_subst$React$JSX$Element,
    renderLazyPlaceholder: () => null,
    keyboardDismissMode: string,
    swipeEnabled: boolean,
    lazy: boolean,
    lazyPreloadDistance: number,
    removeClippedSubviews: boolean,
    springConfig: { ... },
    timingConfig: { ... },
    gestureHandlerProps: { ... },
    renderPager: (props: ChildProps<any>) => $tsflower_subst$React$JSX$Element,
    ...
  };
  state: {
    layout: {
      width: number,
      height: number,
      ...
    },
    ...
  };
  jumpToIndex: any;
  handleLayout: any;
  render(): $tsflower_subst$React$JSX$Element;
}

export {};
