/**
 * Types for the NPM package `@react-native-community/netinfo`.
 *
 * Translated from
 *   node_modules/@react-native-community/netinfo/lib/typescript/src/index.d.ts
 * using Flowgen v1.14.1 with --interface-records
 *
 * @flow strict-local
 */

/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 */

import type {
  NetInfoConfiguration,
  NetInfoState,
  NetInfoChangeHandler,
  NetInfoSubscription,
} from './types';

/**
 * Configures the library with the given configuration. Note that calling this will stop all
 * previously added listeners from being called again. It is best to call this right when your
 * application is started to avoid issues.
 * @param configuration The new configuration to set.
 */
declare export function configure(configuration: $Rest<NetInfoConfiguration, { ... }>): void;

/**
 * Returns a `Promise` that resolves to a `NetInfoState` object.
 * @param [requestedInterface] interface from which to obtain the information
 * @returns A Promise which contains the current connection state.
 */
declare export function fetch(requestedInterface?: string): Promise<NetInfoState>;

/**
 * Subscribe to connection information. The callback is called with a parameter of type
 * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener
 * will be called with the latest information soon after you subscribe and then with any
 * subsequent changes afterwards. You should not assume that the listener is called in the same
 * way across devices or platforms.
 * @param listener The listener which is called when the network state changes.
 * @returns A function which can be called to unsubscribe.
 */
declare export function addEventListener(listener: NetInfoChangeHandler): NetInfoSubscription;

/**
 * A React Hook which updates when the connection state changes.
 * @returns The connection state.
 */
declare export function useNetInfo(
  configuration?: $Rest<NetInfoConfiguration, { ... }>,
): NetInfoState;
declare export * from './types'
declare var _default: {
  configure: typeof configure,
  fetch: typeof fetch,
  addEventListener: typeof addEventListener,
  useNetInfo: typeof useNetInfo,
  ...
};
declare export default typeof _default;
