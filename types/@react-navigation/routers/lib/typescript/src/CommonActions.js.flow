/* @flow
 * @generated by TsFlower
 */
import { type NavigationState, type PartialState, type Route } from './types';
type ResetState =
  | PartialState<NavigationState<>>
  | NavigationState<>
  | ($Diff<NavigationState<>, {| routes: mixed |}> & {
      routes: $Diff<Route<string>, {| key: mixed |}>[],
      ...
    });

export type Action = $Exact<
  | {
      type: 'GO_BACK',
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'NAVIGATE',
      payload:
        | {
            key: string,
            name?: void,
            params?: { ... },
            merge?: boolean,
            ...
          }
        | {
            name: string,
            key?: string,
            params?: { ... },
            merge?: boolean,
            ...
          },
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'RESET',
      payload: ResetState | void,
      source?: string,
      target?: string,
      ...
    }
  | {
      type: 'SET_PARAMS',
      payload: { params?: { ... }, ... },
      source?: string,
      target?: string,
      ...
    },
>;

declare export function goBack(): Action;

declare export function navigate(
  route:
    | {
        key: string,
        params?: { ... },
        ...
      }
    | {
        name: string,
        key?: string,
        params?: { ... },
        ...
      },
): Action;

declare export function navigate(name: string, params?: { ... }): Action;
declare export function reset(state: $ReadOnly<ResetState> | void): Action;
declare export function setParams(params: { ... }): Action;
export {};
