/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import type {
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
} from 'tsflower/subst/react-native';

import * as React from 'react';
import 'react-native';

import {
  type SceneRendererProps,
  type EventEmitterProps,
  type NavigationState,
  type Route,
} from './types';

type Props<T: Route> = SceneRendererProps &
  EventEmitterProps & {
    navigationState: NavigationState<T>,
    lazy: boolean,
    lazyPreloadDistance: number,
    index: number,
    children: (props: { loading: boolean, ... }) => $tsflower_subst$React$ReactNode,
    style?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    ...
  };

type State = { loading: boolean, ... };

declare export default class SceneView<T: Route> extends React.Component<Props<T>, State> {
  getDerivedStateFromProps(props: Props<Route>, state: State): { loading: boolean, ... } | null;
  state: { loading: boolean, ... };
  componentDidMount(): void;
  componentDidUpdate(prevProps: Props<T>, prevState: State): void;
  componentWillUnmount(): void;
  handleEnter: any;
  render(): $tsflower_subst$React$JSX$Element;
}

export {};
