/* @flow
 * @generated by TsFlower
 */
import type { NativeEventEmitter as $tsflower_subst$RN$NativeEventEmitter } from 'tsflower/subst/react-native';
import { NativeEventEmitter } from 'react-native';

type NativeModule = {
  startObserving?: () => void,
  stopObserving?: () => void,
  addListener: (eventName: string) => void,
  removeListeners: (count: number) => void,
  ...
};

export type Subscription = { remove: () => void, ... };

declare export class EventEmitter {
  _listenerCount: number;
  _nativeModule: NativeModule;
  _eventEmitter: $tsflower_subst$RN$NativeEventEmitter;
  constructor(nativeModule: NativeModule): any;
  addListener<T>(eventName: string, listener: (event: T) => void): Subscription;
  removeAllListeners(eventName: string): void;
  removeSubscription(subscription: Subscription): void;
  emit(eventName: string, ...params: any[]): void;
}

export {};
