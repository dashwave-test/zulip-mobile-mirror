/* @flow
 * @generated by TsFlower
 */
import type {
  WithAnimatedValue as $tsflower_subst$RN$Animated$WithAnimatedValue,
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
} from 'tsflower/subst/react-native';

import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  JSX$Element as $tsflower_subst$React$JSX$Element,
  MemoExoticComponent as $tsflower_subst$React$MemoExoticComponent,
} from 'tsflower/subst/react';

import * as React from 'react';
import { Animated } from 'react-native';
import { type Route } from '@react-navigation/native';
import { type Props as HeaderContainerProps } from '../Header/HeaderContainer';

import {
  type Scene,
  type Layout,
  type StackHeaderMode,
  type StackCardMode,
  type TransitionPreset,
} from '../../types';

type Props = TransitionPreset & {
  index: number,
  active: boolean,
  focused: boolean,
  closing: boolean,
  layout: Layout,
  gesture: Animated.Value,
  scene: Scene<Route<string>>,
  safeAreaInsetTop: number,
  safeAreaInsetRight: number,
  safeAreaInsetBottom: number,
  safeAreaInsetLeft: number,
  cardOverlay?: (props: {
    style: $tsflower_subst$RN$Animated$WithAnimatedValue<
      $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    >,
    ...
  }) => $tsflower_subst$React$ReactNode,
  cardOverlayEnabled?: boolean,
  cardShadowEnabled?: boolean,
  cardStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  getPreviousScene: (props: { route: Route<string>, ... }) => Scene<Route<string>> | void,
  getFocusedRoute: () => Route<string>,
  renderHeader: (props: HeaderContainerProps) => $tsflower_subst$React$ReactNode,
  renderScene: (props: { route: Route<string>, ... }) => $tsflower_subst$React$ReactNode,
  onOpenRoute: (props: { route: Route<string>, ... }) => void,
  onCloseRoute: (props: { route: Route<string>, ... }) => void,
  onTransitionStart?: (props: { route: Route<string>, ... }, closing: boolean) => void,
  onTransitionEnd?: (props: { route: Route<string>, ... }, closing: boolean) => void,
  onPageChangeStart?: () => void,
  onPageChangeConfirm?: (force: boolean) => void,
  onPageChangeCancel?: () => void,
  onGestureStart?: (props: { route: Route<string>, ... }) => void,
  onGestureEnd?: (props: { route: Route<string>, ... }) => void,
  onGestureCancel?: (props: { route: Route<string>, ... }) => void,
  gestureEnabled?: boolean,
  gestureResponseDistance?: {
    vertical?: number,
    horizontal?: number,
    ...
  },
  gestureVelocityImpact?: number,
  mode: StackCardMode,
  headerMode: StackHeaderMode,
  headerShown: boolean,
  hasAbsoluteHeader: boolean,
  headerHeight: number,
  onHeaderHeightChange: (props: {
    route: Route<string>,
    height: number,
    ...
  }) => void,
  isParentHeaderShown: boolean,
  ...
};

declare function CardContainer(Props): $tsflower_subst$React$JSX$Element;
declare var _default: $tsflower_subst$React$MemoExoticComponent<typeof CardContainer>;
export default _default;
