/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  ComponentProps as $tsflower_subst$React$ComponentProps,
  RefObject as $tsflower_subst$React$RefObject,
  Context as $tsflower_subst$React$Context,
} from 'tsflower/subst/react';

import * as React from 'react';
import { PanGestureHandler } from 'react-native-gesture-handler';
import Animated from 'react-native-reanimated';

import {
  type Layout,
  type NavigationState,
  type Route,
  type PagerCommonProps,
  type EventEmitterProps,
} from './types';

export type Props<T: Route> = PagerCommonProps & {
  onIndexChange: (index: number) => void,
  navigationState: NavigationState<T>,
  layout: Layout,
  removeClippedSubviews?: boolean,
  children: (
    props: EventEmitterProps & {
      position: Animated.Node<number>,
      render: (children: $tsflower_subst$React$ReactNode) => $tsflower_subst$React$ReactNode,
      jumpTo: (key: string) => void,
      ...
    },
  ) => $tsflower_subst$React$ReactNode,
  gestureHandlerProps: $tsflower_subst$React$ComponentProps<typeof PanGestureHandler>,
  ...
};

type ComponentState = {
  enabled: boolean,
  childPanGestureHandlerRefs: $tsflower_subst$React$RefObject<PanGestureHandler>[],
  ...
};

declare export default class Pager<T: Route> extends React.Component<Props<T>, ComponentState> {
  defaultProps: {
    swipeVelocityImpact: number,
    springVelocityScale: number,
    ...
  };
  state: {
    enabled: boolean,
    childPanGestureHandlerRefs: $tsflower_subst$React$RefObject<PanGestureHandler>[],
    ...
  };
  componentDidMount(): void;
  componentDidUpdate(prevProps: Props<T>): void;
  componentWillUnmount(): void;
  mounted: boolean;
  contextType: $tsflower_subst$React$Context<{ ... }>;
  providerVal: any;
  gestureHandlerRef: any;
  clock: any;
  velocityX: any;
  gestureX: any;
  gestureState: any;
  offsetX: any;
  gesturesEnabled: any;
  progress: any;
  index: any;
  nextIndex: any;
  lastEnteredIndex: any;
  isSwiping: any;
  isSwipeGesture: any;
  indexAtSwipeEnd: any;
  routesLength: any;
  layoutWidth: any;
  swipeVelocityImpact: any;
  springVelocityScale: any;
  position: any;
  springConfig: any;
  timingConfig: any;
  initialVelocityForSpring: any;
  currentIndexValue: any;
  pendingIndexValue: any;
  previouslyFocusedTextInput: any;
  enterListeners: any;
  interactionHandle: any;
  jumpToIndex: any;
  jumpTo: any;
  addListener: any;
  removeListener: any;
  handleEnteredIndexChange: any;
  transitionTo: any;
  handleGestureEvent: any;
  extrapolatedPosition: any;
  toggleEnabled: any;
  maybeCancel: any;
  translateX: any;
  getTranslateX: any;
  render(): $tsflower_subst$React$ReactNode;
}

export {};
