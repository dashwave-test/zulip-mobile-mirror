/* @flow
 * @generated by TsFlower
 */
import type {
  ViewProps as $tsflower_subst$RN$ViewProps,
  AnimatedInterpolation as $tsflower_subst$RN$Animated$AnimatedInterpolation,
  WithAnimatedValue as $tsflower_subst$RN$Animated$WithAnimatedValue,
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
} from 'tsflower/subst/react-native';

import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import * as React from 'react';
import { Animated } from 'react-native';
import { type EdgeInsets } from 'react-native-safe-area-context';

import {
  type TransitionSpec,
  type StackCardStyleInterpolator,
  type GestureDirection,
  type Layout,
} from '../../types';

type Props = $tsflower_subst$RN$ViewProps & {
  index: number,
  closing: boolean,
  next?: $tsflower_subst$RN$Animated$AnimatedInterpolation,
  current: $tsflower_subst$RN$Animated$AnimatedInterpolation,
  gesture: Animated.Value,
  layout: Layout,
  insets: EdgeInsets,
  pageOverflowEnabled: boolean,
  gestureDirection: GestureDirection,
  onOpen: () => void,
  onClose: () => void,
  onTransition?: (props: {
    closing: boolean,
    gesture: boolean,
    ...
  }) => void,
  onGestureBegin?: () => void,
  onGestureCanceled?: () => void,
  onGestureEnd?: () => void,
  children: $tsflower_subst$React$ReactNode,
  overlay: (props: {
    style: $tsflower_subst$RN$Animated$WithAnimatedValue<
      $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    >,
    ...
  }) => $tsflower_subst$React$ReactNode,
  overlayEnabled: boolean,
  shadowEnabled: boolean,
  gestureEnabled: boolean,
  gestureResponseDistance?: {
    vertical?: number,
    horizontal?: number,
    ...
  },
  gestureVelocityImpact: number,
  transitionSpec: {
    open: TransitionSpec,
    close: TransitionSpec,
    ...
  },
  styleInterpolator: StackCardStyleInterpolator,
  containerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  contentStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  ...
};

declare export default class Card extends React.Component<Props> {
  defaultProps: {
    overlayEnabled: boolean,
    shadowEnabled: boolean,
    gestureEnabled: boolean,
    gestureVelocityImpact: number,
    overlay: ({
      style: $tsflower_subst$RN$Animated$WithAnimatedValue<
        $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
      >,
      ...
    }) => $tsflower_subst$React$JSX$Element | null,
    ...
  };
  componentDidMount(): void;
  componentDidUpdate(prevProps: Props): void;
  componentWillUnmount(): void;
  isCurrentlyMounted: any;
  isClosing: any;
  inverted: any;
  layout: any;
  isSwiping: any;
  interactionHandle: any;
  pendingGestureCallback: any;
  lastToValue: any;
  animate: any;
  getAnimateToValue: any;
  setPointerEventsEnabled: any;
  handleStartInteraction: any;
  handleEndInteraction: any;
  handleGestureStateChange: any;
  getInterpolatedStyle: any;
  getCardAnimationContext: any;
  gestureActivationCriteria: any;
  contentRef: any;
  render(): $tsflower_subst$React$JSX$Element;
}

export {};
