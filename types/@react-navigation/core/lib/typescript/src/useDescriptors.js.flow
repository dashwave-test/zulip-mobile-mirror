/* @flow
 * @generated by TsFlower
 */
import {
  type NavigationAction,
  type NavigationState,
  type ParamListBase,
  type Router,
} from '@react-navigation/routers';

import { type AddListener, type AddKeyedListener } from './NavigationBuilderContext';
import { type NavigationEventEmitter } from './useEventEmitter';

import {
  type Descriptor,
  type NavigationHelpers,
  type RouteConfig,
  type RouteProp,
  type EventMapBase,
} from './types';

type Options<State: NavigationState<>, ScreenOptions: { ... }, EventMap: EventMapBase> = {
  state: State,
  screens: { [key: string]: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap> },
  navigation: NavigationHelpers<ParamListBase>,
  screenOptions?:
    | ScreenOptions
    | ((props: {
        route: RouteProp<ParamListBase, string>,
        navigation: any,
        ...
      }) => ScreenOptions),
  defaultScreenOptions?:
    | ScreenOptions
    | ((props: {
        route: RouteProp<ParamListBase, string>,
        navigation: any,
        options: ScreenOptions,
        ...
      }) => ScreenOptions),
  onAction: (action: NavigationAction) => boolean,
  getState: () => State,
  setState: (state: State) => void,
  addListener: AddListener,
  addKeyedListener: AddKeyedListener,
  onRouteFocus: (key: string) => void,
  router: Router<State, NavigationAction>,
  emitter: NavigationEventEmitter<any>,
  ...
};

declare export default function useDescriptors<
  State: NavigationState<>,
  ScreenOptions: { ... },
  EventMap: EventMapBase,
>(
  Options<State, ScreenOptions, EventMap>,
): {
  [key: string]: Descriptor<
    { [key: string]: { ... } | void },
    string,
    State,
    ScreenOptions,
    { ... },
  >,
};
export {};
