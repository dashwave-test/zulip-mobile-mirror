/* @flow
 * @generated by TsFlower
 */
import { type NavigationState, type NavigationAction } from '@react-navigation/routers';
import { type ChildBeforeRemoveListener } from './NavigationBuilderContext';
import { type NavigationEventEmitter } from './useEventEmitter';
import { type EventMapCore } from './types';

type Options = {
  getState: () => NavigationState<>,
  emitter: NavigationEventEmitter<EventMapCore<any>>,
  beforeRemoveListeners: { [key: string]: ChildBeforeRemoveListener | void },
  ...
};

declare export var shouldPreventRemove: (
  emitter: NavigationEventEmitter<EventMapCore<any>>,
  beforeRemoveListeners: { [key: string]: ChildBeforeRemoveListener | void },
  currentRoutes: { key: string, ... }[],
  nextRoutes: { key?: string | void, ... }[],
  action: NavigationAction,
) => boolean;

declare export default function useOnPreventRemove(Options): void;
export {};
