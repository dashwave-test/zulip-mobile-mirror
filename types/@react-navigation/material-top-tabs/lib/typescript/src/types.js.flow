/* @flow
 * @generated by TsFlower
 */
import type { Partial } from 'tsflower/subst/lib';

import type { ReactNode, ComponentProps } from 'tsflower/subst/react';
import type {
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  TextStyle as $tsflower_subst$RN$TextStyle,
} from 'tsflower/subst/react-native';

import 'react-native';
import { TabBar, type SceneRendererProps, TabView } from 'react-native-tab-view';

import {
  type ParamListBase,
  type Descriptor,
  type NavigationHelpers,
  type Route,
  type NavigationProp,
  type TabNavigationState,
  type TabActionHelpers,
  type RouteProp,
} from '@react-navigation/native';

export type MaterialTopTabNavigationEventMap = {|
  tabPress: {|
    data: void,
    canPreventDefault: true,
  |},
  tabLongPress: {| data: void |},
  swipeStart: {| data: void |},
  swipeEnd: {| data: void |},
|};

export type MaterialTopTabNavigationHelpers = NavigationHelpers<
  ParamListBase,
  MaterialTopTabNavigationEventMap,
> &
  TabActionHelpers<ParamListBase>;
export type MaterialTopTabNavigationProp<
  ParamList: ParamListBase,
  +RouteName: $Keys<ParamList> = string,
> = NavigationProp<
  ParamList,
  RouteName,
  TabNavigationState<ParamList>,
  MaterialTopTabNavigationOptions,
  MaterialTopTabNavigationEventMap,
> &
  TabActionHelpers<ParamList>;

export type MaterialTopTabScreenProps<
  ParamList: ParamListBase,
  RouteName: $Keys<ParamList> = string,
> = {
  navigation: MaterialTopTabNavigationProp<ParamList, RouteName>,
  route: RouteProp<ParamList, RouteName>,
  ...
};

export type MaterialTopTabNavigationOptions = {
  title?: string,
  tabBarLabel?:
    | string
    | ((props: {
        focused: boolean,
        color: string,
        ...
      }) => ReactNode),
  tabBarIcon?: (props: {
    focused: boolean,
    color: string,
    ...
  }) => ReactNode,
  tabBarAccessibilityLabel?: string,
  tabBarTestID?: string,
  ...
};

export type MaterialTopTabDescriptor = Descriptor<
  ParamListBase,
  string,
  TabNavigationState<ParamListBase>,
  MaterialTopTabNavigationOptions,
>;
export type MaterialTopTabDescriptorMap = { [key: string]: MaterialTopTabDescriptor, ... };

export type MaterialTopTabNavigationConfig = Partial<
  $Diff<
    ComponentProps<typeof TabView>,
    {|
      navigationState: mixed,
      onIndexChange: mixed,
      onSwipeStart: mixed,
      onSwipeEnd: mixed,
      renderScene: mixed,
      renderTabBar: mixed,
      renderPager: mixed,
      renderLazyPlaceholder: mixed,
    |},
  >,
> & {
  pager?: $ElementType<ComponentProps<typeof TabView>, 'renderPager'>,
  lazyPlaceholder?: (props: { route: Route<string>, ... }) => ReactNode,
  tabBar?: (props: MaterialTopTabBarProps) => ReactNode,
  tabBarOptions?: MaterialTopTabBarOptions,
  tabBarPosition?: 'top' | 'bottom',
  ...
};

export type MaterialTopTabBarOptions = Partial<
  $Diff<
    ComponentProps<typeof TabBar>,
    {|
      [key:
        | 'navigationState'
        | 'activeColor'
        | 'inactiveColor'
        | 'renderLabel'
        | 'renderIcon'
        | 'getLabelText'
        | 'getAccessibilityLabel'
        | 'getTestID'
        | 'onTabPress'
        | 'onTabLongPress'
        | $Keys<SceneRendererProps>]: mixed,
    |},
  >,
> & {
  activeTintColor?: string,
  inactiveTintColor?: string,
  iconStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  labelStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  showLabel?: boolean,
  showIcon?: boolean,
  allowFontScaling?: boolean,
  ...
};

export type MaterialTopTabBarProps = MaterialTopTabBarOptions &
  SceneRendererProps & {
    state: TabNavigationState<ParamListBase>,
    navigation: NavigationHelpers<ParamListBase, MaterialTopTabNavigationEventMap>,
    descriptors: MaterialTopTabDescriptorMap,
    ...
  };
