/* @flow
 * @generated by TsFlower
 */
import { type CommonNavigationAction, type Router, type ParamListBase } from './types';

import {
  type TabActionType,
  type TabRouterOptions,
  type TabNavigationState,
  type TabActionHelpers,
} from './TabRouter';

export type DrawerActionType =
  | TabActionType
  | {
      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER',
      source?: string,
      target?: string,
      ...
    };

export type DrawerRouterOptions = TabRouterOptions & { openByDefault?: boolean, ... };

export type DrawerNavigationState<ParamList: ParamListBase> = $Diff<
  TabNavigationState<ParamList>,
  {|
    type: mixed,
    history: mixed,
  |},
> & {
  type: 'drawer',
  history:
    | {
        type: 'route',
        key: string,
        ...
      }
    | { type: 'drawer', ... }[],
  ...
};

export type DrawerActionHelpers<ParamList: ParamListBase> = TabActionHelpers<ParamList> & {
  openDrawer(): void,
  closeDrawer(): void,
  toggleDrawer(): void,
  ...
};

declare export var DrawerActions: {
  openDrawer(): DrawerActionType,
  closeDrawer(): DrawerActionType,
  toggleDrawer(): DrawerActionType,
  jumpTo(name: string, params?: { ... } | void): TabActionType,
  ...
};

declare export default function DrawerRouter(
  DrawerRouterOptions,
): Router<DrawerNavigationState<ParamListBase>, DrawerActionType | CommonNavigationAction>;
