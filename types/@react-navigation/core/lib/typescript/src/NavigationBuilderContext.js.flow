/* @flow
 * @generated by TsFlower
 */
import type { Context as $tsflower_subst$React$Context } from 'tsflower/subst/react';
import * as React from 'react';
import {
  type NavigationAction,
  type NavigationState,
  type ParamListBase,
} from '@react-navigation/routers';
import { type NavigationHelpers } from './types';

export type ListenerMap = {
  action: ChildActionListener,
  focus: FocusedNavigationListener,
  ...
};

export type KeyedListenerMap = {
  getState: GetStateListener,
  beforeRemove: ChildBeforeRemoveListener,
  ...
};

export type AddListener = <T: $Keys<ListenerMap>>(
  type: T,
  listener: $ElementType<ListenerMap, T>,
) => void;
export type AddKeyedListener = <T: $Keys<KeyedListenerMap>>(
  type: T,
  key: string,
  listener: $ElementType<KeyedListenerMap, T>,
) => void;
export type ChildActionListener = (
  action: NavigationAction,
  visitedNavigators?: Set<string>,
) => boolean;
export type FocusedNavigationCallback<T> = (navigation: NavigationHelpers<ParamListBase>) => T;

export type FocusedNavigationListener = <T>(callback: FocusedNavigationCallback<T>) => {
  handled: boolean,
  result: T,
  ...
};

export type GetStateListener = () => NavigationState<>;
export type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;

declare var NavigationBuilderContext: $tsflower_subst$React$Context<{
  onAction?: (action: NavigationAction, visitedNavigators?: Set<string> | void) => boolean | void,
  addListener?: AddListener | void,
  addKeyedListener?: AddKeyedListener | void,
  onRouteFocus?: (key: string) => void | void,
  onDispatchAction: (action: NavigationAction, noop: boolean) => void,
  onOptionsChange: (options: { ... }) => void,
  ...
}>;

export default NavigationBuilderContext;
