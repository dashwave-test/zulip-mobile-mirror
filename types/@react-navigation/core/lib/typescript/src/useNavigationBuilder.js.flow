/* @flow
 * @generated by TsFlower
 */
import type { SubsetProperties } from '../../../../../../src/generics';
import type { NavigationProp as $tsflower_import_type$_$_2e__2f_types$NavigationProp } from './types';
import type { EventEmitter as $tsflower_import_type$_$_2e__2f_types$EventEmitter } from './types';
import type { EventConsumer as $tsflower_import_type$_$_2e__2f_types$EventConsumer } from './types';
import type { Descriptor as $tsflower_import_type$_$_2e__2f_types$Descriptor } from './types';
import type { NavigationHelpers as $tsflower_import_type$_$_2e__2f_types$NavigationHelpers } from './types';
import type { Readonly, Partial } from 'tsflower/subst/lib';

import type {
  ProviderProps as $tsflower_subst$React$ProviderProps,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import * as React from 'react';

import {
  type DefaultRouterOptions,
  type NavigationState,
  type RouterFactory,
  type PartialState,
} from '@react-navigation/routers';

import { type DefaultNavigatorOptions, PrivateValueStore } from './types';

declare export default function useNavigationBuilder<
  State: NavigationState<>,
  RouterOptions: DefaultRouterOptions<>,
  ActionHelpers: { [key: string]: () => void },
  ScreenOptions: { ... },
  EventMap: { [key: string]: any },
>(
  createRouter: RouterFactory<State, any, RouterOptions>,
  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions,
): {
  state: State,
  navigation: {
    dispatch(
      action:
        | Readonly<{
            type: string,
            payload?: { ... } | void,
            source?: string | void,
            target?: string | void,
            ...
          }>
        | ((
            state: Readonly<{
              key: string,
              index: number,
              routeNames: string[],
              history?: mixed[] | void,
              routes: Readonly<{
                key: string,
                name: string,
                ...
              }> &
                Readonly<{ params?: { ... } | void, ... }> &
                { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
              type: string,
              stale: false,
              ...
            }>,
          ) => Readonly<{
            type: string,
            payload?: { ... } | void,
            source?: string | void,
            target?: string | void,
            ...
          }>),
    ): void,
    navigate<RouteName: string>(...args: [RouteName] | [RouteName, { ... } | void]): void,
    navigate<RouteName_1: string>(
      route:
        | {
            key: string,
            params?: { ... } | void,
            ...
          }
        | {
            name: RouteName_1,
            key?: string | void,
            params: { ... } | void,
            ...
          },
    ): void,
    reset(
      state:
        | Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
            type: string,
            stale: false,
            ...
          }>
        | PartialState<
            Readonly<{
              key: string,
              index: number,
              routeNames: string[],
              history?: mixed[] | void,
              routes: Readonly<{
                key: string,
                name: string,
                ...
              }> &
                Readonly<{ params?: { ... } | void, ... }> &
                { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
              type: string,
              stale: false,
              ...
            }>,
          >,
    ): void,
    goBack(): void,
    isFocused(): boolean,
    canGoBack(): boolean,
    getParent<
      T = $tsflower_import_type$_$_2e__2f_types$NavigationProp<
        { [key: string]: { ... } | void },
        string,
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
          type: string,
          stale: false,
          ...
        }>,
        { ... },
        { ... },
      > | void,
    >(): T,
    getState(): Readonly<{
      key: string,
      index: number,
      routeNames: string[],
      history?: mixed[] | void,
      routes: Readonly<{
        key: string,
        name: string,
        ...
      }> &
        Readonly<{ params?: { ... } | void, ... }> &
        { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
      type: string,
      stale: false,
      ...
    }>,
    dangerouslyGetParent<
      T_1 = $tsflower_import_type$_$_2e__2f_types$NavigationProp<
        { [key: string]: { ... } | void },
        string,
        Readonly<{
          key: string,
          index: number,
          routeNames: string[],
          history?: mixed[] | void,
          routes: Readonly<{
            key: string,
            name: string,
            ...
          }> &
            Readonly<{ params?: { ... } | void, ... }> &
            { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
          type: string,
          stale: false,
          ...
        }>,
        { ... },
        { ... },
      > | void,
    >(): T_1,
    dangerouslyGetState(): Readonly<{
      key: string,
      index: number,
      routeNames: string[],
      history?: mixed[] | void,
      routes: Readonly<{
        key: string,
        name: string,
        ...
      }> &
        Readonly<{ params?: { ... } | void, ... }> &
        { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
      type: string,
      stale: false,
      ...
    }>,
    ...
  } & PrivateValueStore<{ [key: string]: { ... } | void }, string, { ... }> &
    $tsflower_import_type$_$_2e__2f_types$EventEmitter<EventMap> & {
      setParams<RouteName_2: string>(params: { ... } | void): void,
      ...
    } & {
      dispatch(
        action:
          | Readonly<{
              type: string,
              payload?: { ... } | void,
              source?: string | void,
              target?: string | void,
              ...
            }>
          | ((state: any) => Readonly<{
              type: string,
              payload?: { ... } | void,
              source?: string | void,
              target?: string | void,
              ...
            }>),
      ): void,
      navigate<RouteName_3: string>(...args: [RouteName_3] | [RouteName_3, { ... } | void]): void,
      navigate<RouteName_4: string>(
        route:
          | {
              key: string,
              params?: { ... } | void,
              ...
            }
          | {
              name: RouteName_4,
              key?: string | void,
              params: { ... } | void,
              ...
            },
      ): void,
      reset(state: any): void,
      goBack(): void,
      isFocused(): boolean,
      canGoBack(): boolean,
      getParent<
        T_2 = $tsflower_import_type$_$_2e__2f_types$NavigationProp<
          { [key: string]: { ... } | void },
          string,
          Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
            type: string,
            stale: false,
            ...
          }>,
          { ... },
          { ... },
        > | void,
      >(): T_2,
      getState(): any,
      dangerouslyGetParent<
        T_3 = $tsflower_import_type$_$_2e__2f_types$NavigationProp<
          { [key: string]: { ... } | void },
          string,
          Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
            type: string,
            stale: false,
            ...
          }>,
          { ... },
          { ... },
        > | void,
      >(): T_3,
      dangerouslyGetState(): any,
      ...
    } & {
      setParams(params: { ... } | void): void,
      setOptions(options: Partial<any>): void,
      ...
    } & $tsflower_import_type$_$_2e__2f_types$EventConsumer<any> &
    PrivateValueStore<{ [key: string]: { ... } | void }, string, any> &
    ActionHelpers,
  descriptors: {
    [key: string]: $tsflower_import_type$_$_2e__2f_types$Descriptor<
      { [key: string]: { ... } | void },
      string,
      State,
      ScreenOptions,
      { ... },
    >,
  },
  NavigationContent: (
    rest: SubsetProperties<
      $tsflower_subst$React$ProviderProps<$tsflower_import_type$_$_2e__2f_types$NavigationHelpers<
        { [key: string]: { ... } | void },
        { ... },
      > | void>,
      {| children?: mixed |},
    >,
  ) => $tsflower_subst$React$JSX$Element,
  ...
};
