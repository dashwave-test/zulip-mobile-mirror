/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import type {
  LayoutChangeEvent as $tsflower_subst$RN$LayoutChangeEvent,
  StyleProp as $tsflower_subst$RN$StyleProp,
  TextStyle as $tsflower_subst$RN$TextStyle,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
} from 'tsflower/subst/react-native';

import * as React from 'react';
import 'react-native';
import { type Scene, type Route, type NavigationState } from './types';
import Animated from 'react-native-reanimated';

export type Props<T: Route> = {
  position: Animated.Node<number>,
  route: T,
  navigationState: NavigationState<T>,
  activeColor?: string,
  inactiveColor?: string,
  pressColor?: string,
  pressOpacity?: number,
  getLabelText: (scene: Scene<T>) => string | void,
  getAccessible: (scene: Scene<T>) => boolean | void,
  getAccessibilityLabel: (scene: Scene<T>) => string | void,
  getTestID: (scene: Scene<T>) => string | void,
  renderLabel?: (scene: {
    route: T,
    focused: boolean,
    color: string,
    ...
  }) => $tsflower_subst$React$ReactNode,
  renderIcon?: (scene: {
    route: T,
    focused: boolean,
    color: string,
    ...
  }) => $tsflower_subst$React$ReactNode,
  renderBadge?: (scene: Scene<T>) => $tsflower_subst$React$ReactNode,
  onLayout?: (event: $tsflower_subst$RN$LayoutChangeEvent) => void,
  onPress: () => void,
  onLongPress: () => void,
  labelStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  style: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  ...
};

declare export default class TabBarItem<T: Route> extends React.Component<Props<T>> {
  getActiveOpacity: any;
  getInactiveOpacity: any;
  render(): $tsflower_subst$React$JSX$Element;
}
