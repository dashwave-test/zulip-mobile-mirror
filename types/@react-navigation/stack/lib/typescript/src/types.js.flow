/* @flow
 * @generated by TsFlower
 */
import type {
  AnimatedInterpolation as $tsflower_subst$RN$Animated$AnimatedInterpolation,
  WithAnimatedValue as $tsflower_subst$RN$Animated$WithAnimatedValue,
  StyleProp as $tsflower_subst$RN$StyleProp,
  TextStyle as $tsflower_subst$RN$TextStyle,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  LayoutChangeEvent as $tsflower_subst$RN$LayoutChangeEvent,
  AnimationConfig as $tsflower_subst$RN$Animated$AnimationConfig,
  SpringAnimationConfig as $tsflower_subst$RN$Animated$SpringAnimationConfig,
  TimingAnimationConfig as $tsflower_subst$RN$Animated$TimingAnimationConfig,
} from 'tsflower/subst/react-native';

import type { ReactNode as $tsflower_subst$React$ReactNode } from 'tsflower/subst/react';
import type { Partial } from 'tsflower/subst/lib';
import * as React from 'react';
import { typeof Animated } from 'react-native';
import { type EdgeInsets } from 'react-native-safe-area-context';

import {
  type NavigationProp,
  type ParamListBase,
  type Descriptor,
  type Route,
  type NavigationHelpers,
  type StackNavigationState,
  type StackActionHelpers,
  type RouteProp,
} from '@react-navigation/native';

export type StackNavigationEventMap = {|
  transitionStart: {| data: { closing: boolean, ... } |},
  transitionEnd: {| data: { closing: boolean, ... } |},
  gestureStart: {| data: void |},
  gestureEnd: {| data: void |},
  gestureCancel: {| data: void |},
|};

export type StackNavigationHelpers = NavigationHelpers<ParamListBase, StackNavigationEventMap> &
  StackActionHelpers<ParamListBase>;
export type StackNavigationProp<
  ParamList: ParamListBase,
  +RouteName: $Keys<ParamList> = $Keys<ParamList>,
> = NavigationProp<
  ParamList,
  RouteName,
  StackNavigationState<ParamList>,
  StackNavigationOptions,
  StackNavigationEventMap,
> &
  StackActionHelpers<ParamList>;

export type StackScreenProps<ParamList: ParamListBase, RouteName: $Keys<ParamList> = string> = {
  navigation: StackNavigationProp<ParamList, RouteName>,
  route: RouteProp<ParamList, RouteName>,
  ...
};

export type Layout = {
  width: number,
  height: number,
  ...
};

export type GestureDirection =
  | 'horizontal'
  | 'horizontal-inverted'
  | 'vertical'
  | 'vertical-inverted';

export type Scene<T> = {
  route: T,
  descriptor: StackDescriptor,
  progress: {
    current: $tsflower_subst$RN$Animated$AnimatedInterpolation,
    next?: $tsflower_subst$RN$Animated$AnimatedInterpolation,
    previous?: $tsflower_subst$RN$Animated$AnimatedInterpolation,
    ...
  },
  ...
};

export type StackHeaderMode = 'float' | 'screen' | 'none';
export type StackCardMode = 'card' | 'modal';

export type StackHeaderOptions = {
  headerTitle?: string | ((props: StackHeaderTitleProps) => $tsflower_subst$React$ReactNode),
  headerTitleAlign?: 'left' | 'center',
  headerTitleStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  headerTitleContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerTintColor?: string,
  headerTitleAllowFontScaling?: boolean,
  headerBackAllowFontScaling?: boolean,
  headerBackAccessibilityLabel?: string,
  headerBackTitle?: string,
  headerBackTitleStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  headerBackTitleVisible?: boolean,
  headerTruncatedBackTitle?: string,
  headerLeft?: (props: StackHeaderLeftButtonProps) => $tsflower_subst$React$ReactNode,
  headerLeftContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerRight?: (props: { tintColor?: string, ... }) => $tsflower_subst$React$ReactNode,
  headerRightContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerBackImage?: $ElementType<StackHeaderLeftButtonProps, 'backImage'>,
  headerPressColorAndroid?: string,
  headerBackground?: (props: {
    style: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    ...
  }) => $tsflower_subst$React$ReactNode,
  headerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerTransparent?: boolean,
  headerStatusBarHeight?: number,
  ...
};

export type StackHeaderProps = {
  mode: 'float' | 'screen',
  layout: Layout,
  insets: EdgeInsets,
  scene: Scene<Route<string>>,
  previous?: Scene<Route<string>>,
  navigation: StackNavigationProp<ParamListBase>,
  styleInterpolator: StackHeaderStyleInterpolator,
  ...
};

export type StackDescriptor = Descriptor<
  ParamListBase,
  string,
  StackNavigationState<ParamListBase>,
  StackNavigationOptions,
>;
export type StackDescriptorMap = { [key: string]: StackDescriptor, ... };

export type StackNavigationOptions = StackHeaderOptions &
  Partial<TransitionPreset> & {
    title?: string,
    header?: (props: StackHeaderProps) => $tsflower_subst$React$ReactNode,
    headerShown?: boolean,
    cardShadowEnabled?: boolean,
    cardOverlayEnabled?: boolean,
    cardOverlay?: (props: {
      style: $tsflower_subst$RN$Animated$WithAnimatedValue<
        $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
      >,
      ...
    }) => $tsflower_subst$React$ReactNode,
    cardStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    animationEnabled?: boolean,
    animationTypeForReplace?: 'push' | 'pop',
    gestureEnabled?: boolean,
    gestureResponseDistance?: {
      vertical?: number,
      horizontal?: number,
      ...
    },
    gestureVelocityImpact?: number,
    safeAreaInsets?: {
      top?: number,
      right?: number,
      bottom?: number,
      left?: number,
      ...
    },
    detachPreviousScreen?: boolean,
    ...
  };

export type StackNavigationConfig = {
  mode?: StackCardMode,
  headerMode?: StackHeaderMode,
  keyboardHandlingEnabled?: boolean,
  detachInactiveScreens?: boolean,
  ...
};

export type StackHeaderLeftButtonProps = {
  disabled?: boolean,
  onPress?: () => void,
  pressColorAndroid?: string,
  backImage?: (props: { tintColor: string, ... }) => $tsflower_subst$React$ReactNode,
  tintColor?: string,
  label?: string,
  truncatedLabel?: string,
  labelVisible?: boolean,
  labelStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  allowFontScaling?: boolean,
  onLabelLayout?: (e: $tsflower_subst$RN$LayoutChangeEvent) => void,
  screenLayout?: Layout,
  titleLayout?: Layout,
  canGoBack?: boolean,
  accessibilityLabel?: string,
  style?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  ...
};

export type StackHeaderTitleProps = {
  onLayout: (e: $tsflower_subst$RN$LayoutChangeEvent) => void,
  allowFontScaling?: boolean,
  tintColor?: string,
  children?: string,
  style?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  ...
};

export type TransitionSpec =
  | {
      animation: 'spring',
      config: $Diff<
        $tsflower_subst$RN$Animated$SpringAnimationConfig,
        {| [key: 'toValue' | $Keys<$tsflower_subst$RN$Animated$AnimationConfig>]: mixed |},
      >,
      ...
    }
  | {
      animation: 'timing',
      config: $Diff<
        $tsflower_subst$RN$Animated$TimingAnimationConfig,
        {| [key: 'toValue' | $Keys<$tsflower_subst$RN$Animated$AnimationConfig>]: mixed |},
      >,
      ...
    };

export type StackCardInterpolationProps = {
  current: { progress: $tsflower_subst$RN$Animated$AnimatedInterpolation, ... },
  next?: { progress: $tsflower_subst$RN$Animated$AnimatedInterpolation, ... },
  index: number,
  closing: $tsflower_subst$RN$Animated$AnimatedInterpolation,
  swiping: $tsflower_subst$RN$Animated$AnimatedInterpolation,
  inverted: $tsflower_subst$RN$Animated$AnimatedInterpolation,
  layouts: { screen: Layout, ... },
  insets: {
    top: number,
    right: number,
    bottom: number,
    left: number,
    ...
  },
  ...
};

export type StackCardInterpolatedStyle = {
  containerStyle?: any,
  cardStyle?: any,
  overlayStyle?: any,
  shadowStyle?: any,
  ...
};

export type StackCardStyleInterpolator = (
  props: StackCardInterpolationProps,
) => StackCardInterpolatedStyle;

export type StackHeaderInterpolationProps = {
  current: { progress: $tsflower_subst$RN$Animated$AnimatedInterpolation, ... },
  next?: { progress: $tsflower_subst$RN$Animated$AnimatedInterpolation, ... },
  layouts: {
    header: Layout,
    screen: Layout,
    title?: Layout,
    leftLabel?: Layout,
    ...
  },
  ...
};

export type StackHeaderInterpolatedStyle = {
  leftLabelStyle?: any,
  leftButtonStyle?: any,
  rightButtonStyle?: any,
  titleStyle?: any,
  backgroundStyle?: any,
  ...
};

export type StackHeaderStyleInterpolator = (
  props: StackHeaderInterpolationProps,
) => StackHeaderInterpolatedStyle;

export type TransitionPreset = {
  gestureDirection: GestureDirection,
  transitionSpec: {
    open: TransitionSpec,
    close: TransitionSpec,
    ...
  },
  cardStyleInterpolator: StackCardStyleInterpolator,
  headerStyleInterpolator: StackHeaderStyleInterpolator,
  ...
};
