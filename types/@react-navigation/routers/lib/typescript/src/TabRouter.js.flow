/* @flow
 * @generated by TsFlower
 */
import type { SubsetProperties } from '../../../../../../src/generics';
import type { Extract, Readonly } from 'tsflower/subst/lib';

import {
  type NavigationState,
  type PartialState,
  type Router,
  type DefaultRouterOptions,
  type Route,
  type ParamListBase,
} from './types';

export type TabActionType = {
  type: 'JUMP_TO',
  payload: {
    name: string,
    params?: { ... },
    ...
  },
  source?: string,
  target?: string,
  ...
};

export type BackBehavior = 'initialRoute' | 'firstRoute' | 'history' | 'order' | 'none';
export type TabRouterOptions = DefaultRouterOptions<> & { backBehavior?: BackBehavior, ... };

export type TabNavigationState<ParamList: ParamListBase> = $Diff<
  NavigationState<ParamList>,
  {| history: mixed |},
> & {
  type: 'tab',
  history: {
    type: 'route',
    key: string,
    ...
  }[],
  ...
};

export type TabActionHelpers<ParamList: ParamListBase> = {
  // prettier-ignore
  jumpTo<RouteName: Extract<$Keys<ParamList>, string>>(
    ...args: $FlowFixMe /*  undefined extends ParamList[RouteName] ? [RouteName] | [RouteName, ParamList[RouteName]] : [RouteName, ParamList[RouteName]] */ /* tsflower-unimplemented: ConditionalType */
  ): void,
  ...
};

declare export var TabActions: {
  jumpTo(name: string, params?: { ... } | void): TabActionType,
  ...
};

declare export default function TabRouter(TabRouterOptions): Router<
  TabNavigationState<{ [key: string]: { ... } | void }>,
  | {
      type: 'GO_BACK',
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'NAVIGATE',
      payload:
        | {
            key: string,
            name?: void,
            params?: { ... } | void,
            merge?: boolean | void,
            ...
          }
        | {
            name: string,
            key?: string | void,
            params?: { ... } | void,
            merge?: boolean | void,
            ...
          },
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'RESET',
      payload:
        | Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            routes: Readonly<{
              key: string,
              name: string,
              ...
            }> &
              Readonly<{ params?: { ... } | void, ... }> &
              { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
            type: string,
            stale: false,
            ...
          }>
        | PartialState<
            Readonly<{
              key: string,
              index: number,
              routeNames: string[],
              history?: mixed[] | void,
              routes: Readonly<{
                key: string,
                name: string,
                ...
              }> &
                Readonly<{ params?: { ... } | void, ... }> &
                { state?: Readonly<any> | PartialState<Readonly<any>> | void, ... }[],
              type: string,
              stale: false,
              ...
            }>,
          >
        | (Readonly<{
            key: string,
            index: number,
            routeNames: string[],
            history?: mixed[] | void,
            type: string,
            stale: false,
            ...
          }> & {
            routes: SubsetProperties<
              Route<string, { ... } | void>,
              {| name: mixed, params?: mixed |},
            >[],
            ...
          })
        | void,
      source?: string | void,
      target?: string | void,
      ...
    }
  | {
      type: 'SET_PARAMS',
      payload: { params?: { ... } | void, ... },
      source?: string | void,
      target?: string | void,
      ...
    }
  | TabActionType,
>;
